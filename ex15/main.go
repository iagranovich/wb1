package main

import "strings"

// Проблема 1: при создании подстроки она ссылается на
// ту же область памяти что и большая строка, при этом она
// записывается в глобальную переменную. Таким образом большая
// строка не удаляется сборщиком мусора после окончания работы
// функции.

// Решение. построим подстроку с помощью strings.Builder

// Проблема 2: из-за переменной длины кодировки, операция получения
// подстроки v[:100] может вернуть некорректную последовательность байт.

// Решение. Полученную строку можно конвертировать в руны и проверить
// значение последней. если получим 65533 значит в конце строки спец-символ
// который можно удалить. Либо можно сразу брать подстроку не в байтах а в рунах.

// Проблема 3: обращение к глобальной переменной напрямую из функции
// затруднит тестирование.

// Решение. Изменяем глобальную переменную через возвращаемое значении
// функции.

var justString string

func someFunc() string {
	var builder strings.Builder

	v := createHugeString(1 << 10)

	// для проверки послелней руны
	r := []rune(v[:100])
	if r[len(r)-1] == 65533 {
		r = r[:len(r)-1]
	}

	for _, ru := range r {
		builder.WriteRune(ru)
	}

	return builder.String()
}

func main() {
	justString = someFunc()
}
